"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"](177,{

/***/ 56:
/*!************************************!*\
  !*** ./lib/services/graphy-api.ts ***!
  \************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   graphyAPI: () => (/* binding */ graphyAPI)\n/* harmony export */ });\n/* provided dependency */ var process = __webpack_require__(/*! process */ 41463);\n// Graphy API Configuration\nconst GRAPHY_CONFIG = {\n    baseUrl: 'https://api.ongraphy.com',\n    mid: process.env.GRAPHY_MID || 'hyperquest',\n    apiKey: process.env.GRAPHY_API_KEY || '52bae682-186d-44af-a933-c6b6808596c9'\n};\nclass GraphyAPIService {\n    /**\n   * Get learner information by ID\n   */ async getLearner(learnerId) {\n        let includeCourseInfo = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : false;\n        try {\n            const url = \"\".concat(this.baseUrl, \"/public/v1/learners/\").concat(learnerId, \"?mid=\").concat(this.mid, \"&key=\").concat(this.apiKey, \"&courseInfo=\").concat(includeCourseInfo);\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data\n            };\n        } catch (error) {\n            console.error('Error fetching learner:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error occurred'\n            };\n        }\n    }\n    /**\n   * Get learner usage statistics\n   */ async getLearnerUsage(learnerId, productId, date) {\n        try {\n            const dateParam = date ? \"&date=\".concat(date) : '';\n            const url = \"\".concat(this.baseUrl, \"/public/v1/learners/\").concat(learnerId, \"/usage?mid=\").concat(this.mid, \"&key=\").concat(this.apiKey, \"&productId=\").concat(productId).concat(dateParam);\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data\n            };\n        } catch (error) {\n            console.error('Error fetching learner usage:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error occurred'\n            };\n        }\n    }\n    /**\n   * Get learner discussions\n   */ async getLearnerDiscussions(learnerId, startDate, endDate) {\n        try {\n            const startParam = startDate ? \"&startDate=\".concat(startDate) : '';\n            const endParam = endDate ? \"&endDate=\".concat(endDate) : '';\n            const url = \"\".concat(this.baseUrl, \"/public/v1/learners/\").concat(learnerId, \"/discussions?mid=\").concat(this.mid, \"&key=\").concat(this.apiKey).concat(startParam).concat(endParam);\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data\n            };\n        } catch (error) {\n            console.error('Error fetching learner discussions:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error occurred'\n            };\n        }\n    }\n    /**\n   * Get live class attendees\n   */ async getLiveClassAttendees(liveClassId) {\n        let skip = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : 0, limit = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 10;\n        try {\n            const url = \"\".concat(this.baseUrl, \"/t/api/public/v3/products/liveclass/attendees?mid=\").concat(this.mid, \"&key=\").concat(this.apiKey, \"&skip=\").concat(skip, \"&limit=\").concat(limit, \"&liveClassId=\").concat(liveClassId);\n            const response = await fetch(url, {\n                method: 'GET',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data\n            };\n        } catch (error) {\n            console.error('Error fetching live class attendees:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error occurred'\n            };\n        }\n    }\n    /**\n   * Reset learner device registrations\n   */ async resetLearnerDevice(email) {\n        try {\n            const url = \"\".concat(this.baseUrl, \"/t/api/public/v3/learners/reset-device?mid=\").concat(this.mid, \"&key=\").concat(this.apiKey, \"&email=\").concat(email);\n            const response = await fetch(url, {\n                method: 'PUT',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data\n            };\n        } catch (error) {\n            console.error('Error resetting learner device:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error occurred'\n            };\n        }\n    }\n    /**\n   * Create or update learner\n   */ async createOrUpdateLearner(learnerData) {\n        try {\n            const formData = new URLSearchParams();\n            formData.append('mid', this.mid);\n            formData.append('key', this.apiKey);\n            formData.append('email', learnerData.email);\n            if (learnerData.name) formData.append('name', learnerData.name);\n            if (learnerData.password) formData.append('password', learnerData.password);\n            if (learnerData.mobile) formData.append('mobile', learnerData.mobile);\n            if (learnerData.sendEmail !== undefined) formData.append('sendEmail', learnerData.sendEmail.toString());\n            if (learnerData.customFields) formData.append('customFields', JSON.stringify(learnerData.customFields));\n            const response = await fetch(\"\".concat(this.baseUrl, \"/t/api/public/v3/learners/update\"), {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/x-www-form-urlencoded'\n                },\n                body: formData\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data\n            };\n        } catch (error) {\n            console.error('Error creating/updating learner:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error occurred'\n            };\n        }\n    }\n    /**\n   * Reset iOS screenshot restriction\n   */ async resetIOSScreenshotRestriction(email) {\n        try {\n            const url = \"\".concat(this.baseUrl, \"/t/api/public/v3/learners/reset/ios/screenshot?mid=\").concat(this.mid, \"&key=\").concat(this.apiKey, \"&email=\").concat(email);\n            const response = await fetch(url, {\n                method: 'PATCH',\n                headers: {\n                    'Content-Type': 'application/json'\n                }\n            });\n            if (!response.ok) {\n                throw new Error(\"HTTP error! status: \".concat(response.status));\n            }\n            const data = await response.json();\n            return {\n                success: true,\n                data\n            };\n        } catch (error) {\n            console.error('Error resetting iOS screenshot restriction:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error occurred'\n            };\n        }\n    }\n    /**\n   * Helper method to format dates for API calls\n   */ formatDate(date) {\n        return date.toISOString().split('T')[0].replace(/-/g, '/');\n    }\n    /**\n   * Helper method to validate email format\n   */ isValidEmail(email) {\n        const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n        return emailRegex.test(email);\n    }\n    constructor(){\n        this.baseUrl = GRAPHY_CONFIG.baseUrl;\n        this.mid = GRAPHY_CONFIG.mid;\n        this.apiKey = GRAPHY_CONFIG.apiKey;\n    }\n}\n// Export singleton instance\nconst graphyAPI = new GraphyAPIService();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GraphyAPIService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///56\n"));

/***/ }),

/***/ 415:
/*!****************************************************!*\
  !*** ./lib/services/graphy-package-integration.ts ***!
  \****************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   PACKAGE_TO_GRAPHY_MAPPING: () => (/* binding */ PACKAGE_TO_GRAPHY_MAPPING),\n/* harmony export */   \"default\": () => (__WEBPACK_DEFAULT_EXPORT__),\n/* harmony export */   graphyPackageIntegration: () => (/* binding */ graphyPackageIntegration)\n/* harmony export */ });\n/* harmony import */ var _graphy_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./graphy-api */ 56);\n\n// Mapping of Shikshanam packages to Graphy products\nconst PACKAGE_TO_GRAPHY_MAPPING = {\n    'sanskrit-foundations': {\n        sku: 'sanskrit-foundations',\n        graphyProductId: 'sanskrit_foundations_001',\n        graphyCourseIds: [\n            'sanskrit_alphabet_001',\n            'sanskrit_grammar_001',\n            'sanskrit_vocab_001'\n        ],\n        liveClassIds: [\n            'sanskrit_live_001'\n        ]\n    },\n    'vedic-philosophy-complete': {\n        sku: 'vedic-philosophy-complete',\n        graphyProductId: 'vedic_philosophy_001',\n        graphyCourseIds: [\n            'upanishads_001',\n            'vedanta_001',\n            'mimamsa_001'\n        ],\n        liveClassIds: [\n            'vedic_live_001'\n        ]\n    },\n    'yoga-darshan-advanced': {\n        sku: 'yoga-darshan-advanced',\n        graphyProductId: 'yoga_darshan_001',\n        graphyCourseIds: [\n            'yoga_sutras_001',\n            'yoga_philosophy_001'\n        ],\n        liveClassIds: [\n            'yoga_live_001'\n        ]\n    },\n    'emotional-intelligence-with-samkhya': {\n        sku: 'emotional-intelligence-with-samkhya',\n        graphyProductId: 'emotional_intelligence_001',\n        graphyCourseIds: [\n            'samkhya_001',\n            'emotional_intelligence_001'\n        ],\n        liveClassIds: [\n            'ei_live_001'\n        ]\n    },\n    'isha-upanishad': {\n        sku: 'isha-upanishad',\n        graphyProductId: 'isha_upanishad_001',\n        graphyCourseIds: [\n            'isha_upanishad_001'\n        ],\n        liveClassIds: [\n            'isha_live_001'\n        ]\n    },\n    'kashmir-shaivism': {\n        sku: 'kashmir-shaivism',\n        graphyProductId: 'kashmir_shaivism_001',\n        graphyCourseIds: [\n            'kashmir_shaivism_001'\n        ],\n        liveClassIds: [\n            'kashmir_live_001'\n        ]\n    },\n    'nyaya-darshan': {\n        sku: 'nyaya-darshan',\n        graphyProductId: 'nyaya_darshan_001',\n        graphyCourseIds: [\n            'nyaya_001'\n        ],\n        liveClassIds: [\n            'nyaya_live_001'\n        ]\n    },\n    'prashna-upanishad': {\n        sku: 'prashna-upanishad',\n        graphyProductId: 'prashna_upanishad_001',\n        graphyCourseIds: [\n            'prashna_upanishad_001'\n        ],\n        liveClassIds: [\n            'prashna_live_001'\n        ]\n    },\n    'samkhya-darshan': {\n        sku: 'samkhya-darshan',\n        graphyProductId: 'samkhya_darshan_001',\n        graphyCourseIds: [\n            'samkhya_001'\n        ],\n        liveClassIds: [\n            'samkhya_live_001'\n        ]\n    },\n    'tantra-darshan': {\n        sku: 'tantra-darshan',\n        graphyProductId: 'tantra_darshan_001',\n        graphyCourseIds: [\n            'tantra_001'\n        ],\n        liveClassIds: [\n            'tantra_live_001'\n        ]\n    },\n    'vaisheshik-darshan': {\n        sku: 'vaisheshik-darshan',\n        graphyProductId: 'vaisheshik_darshan_001',\n        graphyCourseIds: [\n            'vaisheshik_001'\n        ],\n        liveClassIds: [\n            'vaisheshik_live_001'\n        ]\n    },\n    'vedanta-essentials': {\n        sku: 'vedanta-essentials',\n        graphyProductId: 'vedanta_essentials_001',\n        graphyCourseIds: [\n            'vedanta_001'\n        ],\n        liveClassIds: [\n            'vedanta_live_001'\n        ]\n    },\n    'yoga-darshan': {\n        sku: 'yoga-darshan',\n        graphyProductId: 'yoga_darshan_basic_001',\n        graphyCourseIds: [\n            'yoga_basics_001'\n        ],\n        liveClassIds: [\n            'yoga_basic_live_001'\n        ]\n    }\n};\nclass GraphyPackageIntegrationService {\n    /**\n   * Create a learner in Graphy when user authenticates\n   */ async createLearnerFromAuth(userData) {\n        try {\n            const result = await _graphy_api__WEBPACK_IMPORTED_MODULE_0__.graphyAPI.createOrUpdateLearner({\n                email: userData.email,\n                name: userData.name,\n                mobile: userData.mobile,\n                sendEmail: true,\n                customFields: {\n                    source: 'shikshanam',\n                    registrationDate: new Date().toISOString(),\n                    platform: 'web'\n                }\n            });\n            return result;\n        } catch (error) {\n            console.error('Error creating learner from auth:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to create learner'\n            };\n        }\n    }\n    /**\n   * Get learner progress for a specific package\n   */ async getLearnerProgress(learnerId, packageSku) {\n        try {\n            const mapping = PACKAGE_TO_GRAPHY_MAPPING[packageSku];\n            if (!mapping) {\n                return {\n                    success: false,\n                    error: \"Package mapping not found for SKU: \".concat(packageSku)\n                };\n            }\n            // Get learner with course info\n            const learnerResult = await _graphy_api__WEBPACK_IMPORTED_MODULE_0__.graphyAPI.getLearner(learnerId, true);\n            if (!learnerResult.success) {\n                return learnerResult;\n            }\n            // Get usage data for the product\n            const usageResult = await _graphy_api__WEBPACK_IMPORTED_MODULE_0__.graphyAPI.getLearnerUsage(learnerId, mapping.graphyProductId);\n            if (!usageResult.success) {\n                return usageResult;\n            }\n            return {\n                success: true,\n                data: {\n                    learner: learnerResult.data,\n                    usage: usageResult.data,\n                    packageSku,\n                    graphyProductId: mapping.graphyProductId\n                }\n            };\n        } catch (error) {\n            console.error('Error getting learner progress:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to get learner progress'\n            };\n        }\n    }\n    /**\n   * Enroll learner in a package (simulate enrollment in Graphy)\n   */ async enrollLearnerInPackage(learnerId, packageSku) {\n        try {\n            const mapping = PACKAGE_TO_GRAPHY_MAPPING[packageSku];\n            if (!mapping) {\n                return {\n                    success: false,\n                    error: \"Package mapping not found for SKU: \".concat(packageSku)\n                };\n            }\n            // In a real implementation, this would call Graphy's enrollment API\n            // For now, we'll simulate successful enrollment\n            const enrollmentData = {\n                learnerId,\n                packageSku,\n                graphyProductId: mapping.graphyProductId,\n                enrolledAt: new Date().toISOString(),\n                status: 'active',\n                courses: mapping.graphyCourseIds,\n                liveClasses: mapping.liveClassIds || []\n            };\n            return {\n                success: true,\n                data: enrollmentData,\n                message: 'Successfully enrolled in package'\n            };\n        } catch (error) {\n            console.error('Error enrolling learner in package:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to enroll in package'\n            };\n        }\n    }\n    /**\n   * Get learner's enrolled packages\n   */ async getLearnerPackages(learnerId) {\n        try {\n            var _learnerResult_data_courseInfo, _learnerResult_data;\n            // Get learner with course info\n            const learnerResult = await _graphy_api__WEBPACK_IMPORTED_MODULE_0__.graphyAPI.getLearner(learnerId, true);\n            if (!learnerResult.success) {\n                return {\n                    success: false,\n                    error: learnerResult.error || 'Failed to fetch learner data'\n                };\n            }\n            // Map Graphy course data to Shikshanam UserPackage format\n            const userPackages = [];\n            // This would typically come from Graphy's enrollment data\n            // For now, we'll simulate based on the learner's course info\n            if ((_learnerResult_data = learnerResult.data) === null || _learnerResult_data === void 0 ? void 0 : (_learnerResult_data_courseInfo = _learnerResult_data.courseInfo) === null || _learnerResult_data_courseInfo === void 0 ? void 0 : _learnerResult_data_courseInfo.enrolledCourses) {\n                const enrolledCourses = learnerResult.data.courseInfo.enrolledCourses;\n                // Group courses by package\n                const packageGroups = {};\n                enrolledCourses.forEach((course)=>{\n                    // Find which package this course belongs to\n                    for (const [sku, mapping] of Object.entries(PACKAGE_TO_GRAPHY_MAPPING)){\n                        if (mapping.graphyCourseIds.includes(course.id)) {\n                            if (!packageGroups[sku]) {\n                                packageGroups[sku] = [];\n                            }\n                            packageGroups[sku].push(course);\n                        }\n                    }\n                });\n                // Convert to UserPackage format\n                for (const [sku, courses] of Object.entries(packageGroups)){\n                    const mapping = PACKAGE_TO_GRAPHY_MAPPING[sku];\n                    if (mapping) {\n                        userPackages.push({\n                            sku,\n                            name: this.getPackageName(sku),\n                            accessExpiresAt: undefined,\n                            status: 'active',\n                            progress: this.calculateProgress(courses),\n                            nextLiveSession: undefined,\n                            availableMentorHours: 0,\n                            certificateStatus: this.getCertificateStatus(courses),\n                            includedCourses: courses.map((course)=>({\n                                    id: course.id,\n                                    title: course.title,\n                                    duration: course.duration || '4 weeks',\n                                    link: \"/courses/\".concat(course.id)\n                                }))\n                        });\n                    }\n                }\n            }\n            return {\n                success: true,\n                data: userPackages\n            };\n        } catch (error) {\n            console.error('Error getting learner packages:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to get learner packages'\n            };\n        }\n    }\n    /**\n   * Get live class attendees for a package\n   */ async getLiveClassAttendees(packageSku, liveClassId) {\n        try {\n            const result = await _graphy_api__WEBPACK_IMPORTED_MODULE_0__.graphyAPI.getLiveClassAttendees(liveClassId, 0, 100);\n            return result;\n        } catch (error) {\n            console.error('Error getting live class attendees:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to get live class attendees'\n            };\n        }\n    }\n    /**\n   * Get upcoming live sessions for a package\n   */ async getUpcomingLiveSessions(packageSku) {\n        try {\n            const mapping = PACKAGE_TO_GRAPHY_MAPPING[packageSku];\n            if (!mapping || !mapping.liveClassIds) {\n                return {\n                    success: true,\n                    data: []\n                };\n            }\n            // In a real implementation, this would fetch from Graphy's live class API\n            // For now, we'll return mock data\n            const sessions = mapping.liveClassIds.map((liveClassId, index)=>({\n                    id: liveClassId,\n                    date: new Date(Date.now() + (index + 1) * 7 * 24 * 60 * 60 * 1000).toISOString(),\n                    seatRemaining: Math.floor(Math.random() * 50) + 10,\n                    maxSeats: 100,\n                    title: \"Live Session \".concat(index + 1, \" - \").concat(this.getPackageName(packageSku))\n                }));\n            return {\n                success: true,\n                data: sessions\n            };\n        } catch (error) {\n            console.error('Error getting upcoming live sessions:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to get live sessions'\n            };\n        }\n    }\n    /**\n   * Get learner usage for a specific package\n   */ async getLearnerUsage(learnerId, packageSku) {\n        try {\n            const mapping = PACKAGE_TO_GRAPHY_MAPPING[packageSku];\n            if (!mapping) {\n                return {\n                    success: false,\n                    error: \"Package mapping not found for SKU: \".concat(packageSku)\n                };\n            }\n            const result = await _graphy_api__WEBPACK_IMPORTED_MODULE_0__.graphyAPI.getLearnerUsage(learnerId, mapping.graphyProductId);\n            return result;\n        } catch (error) {\n            console.error('Error getting learner usage:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to get learner usage'\n            };\n        }\n    }\n    /**\n   * Get learner discussions\n   */ async getLearnerDiscussions(learnerId, packageSku) {\n        try {\n            const result = await _graphy_api__WEBPACK_IMPORTED_MODULE_0__.graphyAPI.getLearnerDiscussions(learnerId);\n            return result;\n        } catch (error) {\n            console.error('Error getting learner discussions:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to get learner discussions'\n            };\n        }\n    }\n    /**\n   * Reset learner device\n   */ async resetLearnerDevice(email) {\n        try {\n            const result = await _graphy_api__WEBPACK_IMPORTED_MODULE_0__.graphyAPI.resetLearnerDevice(email);\n            return result;\n        } catch (error) {\n            console.error('Error resetting learner device:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to reset learner device'\n            };\n        }\n    }\n    /**\n   * Reset iOS screenshot restriction\n   */ async resetIOSScreenshotRestriction(email) {\n        try {\n            const result = await _graphy_api__WEBPACK_IMPORTED_MODULE_0__.graphyAPI.resetIOSScreenshotRestriction(email);\n            return result;\n        } catch (error) {\n            console.error('Error resetting iOS screenshot restriction:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to reset iOS screenshot restriction'\n            };\n        }\n    }\n    // Helper methods\n    getPackageName(sku) {\n        const packageNames = {\n            'sanskrit-foundations': 'Sanskrit Foundations',\n            'vedic-philosophy-complete': 'Vedic Philosophy Complete',\n            'yoga-darshan-advanced': 'Yoga Darshan Advanced',\n            'emotional-intelligence-with-samkhya': 'Emotional Intelligence with Samkhya',\n            'isha-upanishad': 'Isha Upanishad',\n            'kashmir-shaivism': 'Kashmir Shaivism',\n            'nyaya-darshan': 'Nyaya Darshan',\n            'prashna-upanishad': 'Prashna Upanishad',\n            'samkhya-darshan': 'Samkhya Darshan',\n            'tantra-darshan': 'Tantra Darshan',\n            'vaisheshik-darshan': 'Vaisheshik Darshan',\n            'vedanta-essentials': 'Vedanta Essentials',\n            'yoga-darshan': 'Yoga Darshan'\n        };\n        return packageNames[sku] || sku;\n    }\n    calculateProgress(courses) {\n        if (!courses || courses.length === 0) return 0;\n        const totalProgress = courses.reduce((sum, course)=>sum + (course.progress || 0), 0);\n        return Math.round(totalProgress / courses.length);\n    }\n    getCertificateStatus(courses) {\n        if (!courses || courses.length === 0) return 'not_available';\n        const allCompleted = courses.every((course)=>course.progress === 100);\n        if (allCompleted) {\n            return 'issued';\n        }\n        const someCompleted = courses.some((course)=>course.progress === 100);\n        return someCompleted ? 'pending' : 'not_available';\n    }\n}\n// Export singleton instance\nconst graphyPackageIntegration = new GraphyPackageIntegrationService();\n/* harmony default export */ const __WEBPACK_DEFAULT_EXPORT__ = (GraphyPackageIntegrationService);\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///415\n"));

/***/ }),

/***/ 98497:
/*!******************************!*\
  !*** ./lib/auth-context.tsx ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AuthProvider: () => (/* binding */ AuthProvider),\n/* harmony export */   useAuth: () => (/* binding */ useAuth)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ 35733);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ 12115);\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _cookies__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./cookies */ 2444);\n/* harmony import */ var _services_graphy_package_integration__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./services/graphy-package-integration */ 415);\n/* __next_internal_client_entry_do_not_use__ AuthProvider,useAuth auto */ \nvar _s = $RefreshSig$(), _s1 = $RefreshSig$();\n\n\n\nconst AuthContext = /*#__PURE__*/ (0,react__WEBPACK_IMPORTED_MODULE_1__.createContext)(undefined);\nfunction AuthProvider(param) {\n    let { children } = param;\n    _s();\n    const [isLoggedIn, setIsLoggedIn] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [user, setUser] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    const [isInitialized, setIsInitialized] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [isCreatingLearner, setIsCreatingLearner] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [learnerCreationError, setLearnerCreationError] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(null);\n    // Define login function first to avoid initialization error\n    const login = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"AuthProvider.useCallback[login]\": (userData)=>{\n            setIsLoggedIn(true);\n            setUser(userData);\n            (0,_cookies__WEBPACK_IMPORTED_MODULE_2__.setAuthCookie)(userData);\n        }\n    }[\"AuthProvider.useCallback[login]\"], []);\n    const logout = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"AuthProvider.useCallback[logout]\": ()=>{\n            setIsLoggedIn(false);\n            setUser(null);\n            (0,_cookies__WEBPACK_IMPORTED_MODULE_2__.deleteAuthCookie)();\n        }\n    }[\"AuthProvider.useCallback[logout]\"], []);\n    // Create Graphy learner when user logs in\n    const createGraphyLearner = (0,react__WEBPACK_IMPORTED_MODULE_1__.useCallback)({\n        \"AuthProvider.useCallback[createGraphyLearner]\": async ()=>{\n            if (!user || isCreatingLearner) return;\n            setIsCreatingLearner(true);\n            setLearnerCreationError(null);\n            try {\n                const result = await _services_graphy_package_integration__WEBPACK_IMPORTED_MODULE_3__.graphyPackageIntegration.createLearnerFromAuth({\n                    name: user.name,\n                    email: user.email,\n                    mobile: undefined\n                });\n                if (result.success && result.data) {\n                    // Update user with Graphy learner ID\n                    const updatedUser = {\n                        ...user,\n                        graphyLearnerId: result.data.id\n                    };\n                    setUser(updatedUser);\n                    (0,_cookies__WEBPACK_IMPORTED_MODULE_2__.setAuthCookie)(updatedUser);\n                } else {\n                    setLearnerCreationError(result.error || 'Failed to create Graphy learner');\n                }\n            } catch (error) {\n                const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n                setLearnerCreationError(errorMessage);\n            } finally{\n                setIsCreatingLearner(false);\n            }\n        }\n    }[\"AuthProvider.useCallback[createGraphyLearner]\"], [\n        user,\n        isCreatingLearner\n    ]);\n    // Check for existing auth state on mount\n    (0,react__WEBPACK_IMPORTED_MODULE_1__.useEffect)({\n        \"AuthProvider.useEffect\": ()=>{\n            try {\n                // Check for saved auth state in cookies\n                const authData = (0,_cookies__WEBPACK_IMPORTED_MODULE_2__.getAuthCookie)();\n                if (authData && authData.isLoggedIn && authData.user) {\n                    setIsLoggedIn(true);\n                    setUser(authData.user);\n                }\n            } catch (error) {\n                console.warn('Failed to load auth state from cookies:', error);\n                // Clear potentially corrupted auth data\n                (0,_cookies__WEBPACK_IMPORTED_MODULE_2__.deleteAuthCookie)();\n            }\n            setIsInitialized(true);\n        }\n    }[\"AuthProvider.useEffect\"], []);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(AuthContext.Provider, {\n        value: {\n            isLoggedIn,\n            user,\n            isInitialized,\n            login,\n            logout\n        },\n        children: children\n    }, void 0, false, {\n        fileName: \"/Users/amanbhogal/Desktop/shiksha/shikshanam_new/lib/auth-context.tsx\",\n        lineNumber: 96,\n        columnNumber: 5\n    }, this);\n}\n_s(AuthProvider, \"2J2iX+XJGcryr00oCkp/T5iY+EQ=\");\n_c = AuthProvider;\nfunction useAuth() {\n    _s1();\n    const context = (0,react__WEBPACK_IMPORTED_MODULE_1__.useContext)(AuthContext);\n    if (context === undefined) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n}\n_s1(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,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aGEvc2hpa3NoYW5hbV9uZXcvbGliL2F1dGgtY29udGV4dC50c3giXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBjbGllbnQnXG5cbmltcG9ydCB7IGNyZWF0ZUNvbnRleHQsIHVzZUNvbnRleHQsIHVzZVN0YXRlLCB1c2VFZmZlY3QsIHVzZUNhbGxiYWNrLCBSZWFjdE5vZGUgfSBmcm9tICdyZWFjdCdcbmltcG9ydCB7IHNldEF1dGhDb29raWUsIGdldEF1dGhDb29raWUsIGRlbGV0ZUF1dGhDb29raWUgfSBmcm9tICcuL2Nvb2tpZXMnXG5pbXBvcnQgeyBncmFwaHlQYWNrYWdlSW50ZWdyYXRpb24gfSBmcm9tICcuL3NlcnZpY2VzL2dyYXBoeS1wYWNrYWdlLWludGVncmF0aW9uJ1xuXG5pbnRlcmZhY2UgVXNlciB7XG4gIG5hbWU6IHN0cmluZ1xuICBlbWFpbDogc3RyaW5nXG4gIGF2YXRhcj86IHN0cmluZ1xuICBncmFwaHlMZWFybmVySWQ/OiBzdHJpbmdcbn1cblxuaW50ZXJmYWNlIEF1dGhDb250ZXh0VHlwZSB7XG4gIGlzTG9nZ2VkSW46IGJvb2xlYW5cbiAgdXNlcjogVXNlciB8IG51bGxcbiAgaXNJbml0aWFsaXplZDogYm9vbGVhblxuICBpc0NyZWF0aW5nTGVhcm5lcjogYm9vbGVhblxuICBsZWFybmVyQ3JlYXRpb25FcnJvcjogc3RyaW5nIHwgbnVsbFxuICBsb2dpbjogKHVzZXJEYXRhOiBVc2VyKSA9PiB2b2lkXG4gIGxvZ291dDogKCkgPT4gdm9pZFxuICBjcmVhdGVHcmFwaHlMZWFybmVyOiAoKSA9PiBQcm9taXNlPHZvaWQ+XG59XG5cbmNvbnN0IEF1dGhDb250ZXh0ID0gY3JlYXRlQ29udGV4dDxBdXRoQ29udGV4dFR5cGUgfCB1bmRlZmluZWQ+KHVuZGVmaW5lZClcblxuZXhwb3J0IGZ1bmN0aW9uIEF1dGhQcm92aWRlcih7IGNoaWxkcmVuIH06IHsgY2hpbGRyZW46IFJlYWN0Tm9kZSB9KSB7XG4gIGNvbnN0IFtpc0xvZ2dlZEluLCBzZXRJc0xvZ2dlZEluXSA9IHVzZVN0YXRlKGZhbHNlKVxuICBjb25zdCBbdXNlciwgc2V0VXNlcl0gPSB1c2VTdGF0ZTxVc2VyIHwgbnVsbD4obnVsbClcbiAgY29uc3QgW2lzSW5pdGlhbGl6ZWQsIHNldElzSW5pdGlhbGl6ZWRdID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFtpc0NyZWF0aW5nTGVhcm5lciwgc2V0SXNDcmVhdGluZ0xlYXJuZXJdID0gdXNlU3RhdGUoZmFsc2UpXG4gIGNvbnN0IFtsZWFybmVyQ3JlYXRpb25FcnJvciwgc2V0TGVhcm5lckNyZWF0aW9uRXJyb3JdID0gdXNlU3RhdGU8c3RyaW5nIHwgbnVsbD4obnVsbClcblxuICAvLyBEZWZpbmUgbG9naW4gZnVuY3Rpb24gZmlyc3QgdG8gYXZvaWQgaW5pdGlhbGl6YXRpb24gZXJyb3JcbiAgY29uc3QgbG9naW4gPSB1c2VDYWxsYmFjaygodXNlckRhdGE6IFVzZXIpID0+IHtcbiAgICBzZXRJc0xvZ2dlZEluKHRydWUpXG4gICAgc2V0VXNlcih1c2VyRGF0YSlcbiAgICBzZXRBdXRoQ29va2llKHVzZXJEYXRhKVxuICB9LCBbXSlcblxuICBjb25zdCBsb2dvdXQgPSB1c2VDYWxsYmFjaygoKSA9PiB7XG4gICAgc2V0SXNMb2dnZWRJbihmYWxzZSlcbiAgICBzZXRVc2VyKG51bGwpXG4gICAgZGVsZXRlQXV0aENvb2tpZSgpXG4gIH0sIFtdKVxuXG4gIC8vIENyZWF0ZSBHcmFwaHkgbGVhcm5lciB3aGVuIHVzZXIgbG9ncyBpblxuICBjb25zdCBjcmVhdGVHcmFwaHlMZWFybmVyID0gdXNlQ2FsbGJhY2soYXN5bmMgKCkgPT4ge1xuICAgIGlmICghdXNlciB8fCBpc0NyZWF0aW5nTGVhcm5lcikgcmV0dXJuXG5cbiAgICBzZXRJc0NyZWF0aW5nTGVhcm5lcih0cnVlKVxuICAgIHNldExlYXJuZXJDcmVhdGlvbkVycm9yKG51bGwpXG5cbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgZ3JhcGh5UGFja2FnZUludGVncmF0aW9uLmNyZWF0ZUxlYXJuZXJGcm9tQXV0aCh7XG4gICAgICAgIG5hbWU6IHVzZXIubmFtZSxcbiAgICAgICAgZW1haWw6IHVzZXIuZW1haWwsXG4gICAgICAgIG1vYmlsZTogdW5kZWZpbmVkXG4gICAgICB9KVxuXG4gICAgICBpZiAocmVzdWx0LnN1Y2Nlc3MgJiYgcmVzdWx0LmRhdGEpIHtcbiAgICAgICAgLy8gVXBkYXRlIHVzZXIgd2l0aCBHcmFwaHkgbGVhcm5lciBJRFxuICAgICAgICBjb25zdCB1cGRhdGVkVXNlciA9IHsgLi4udXNlciwgZ3JhcGh5TGVhcm5lcklkOiByZXN1bHQuZGF0YS5pZCB9XG4gICAgICAgIHNldFVzZXIodXBkYXRlZFVzZXIpXG4gICAgICAgIHNldEF1dGhDb29raWUodXBkYXRlZFVzZXIpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzZXRMZWFybmVyQ3JlYXRpb25FcnJvcihyZXN1bHQuZXJyb3IgfHwgJ0ZhaWxlZCB0byBjcmVhdGUgR3JhcGh5IGxlYXJuZXInKVxuICAgICAgfVxuICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICBjb25zdCBlcnJvck1lc3NhZ2UgPSBlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ1xuICAgICAgc2V0TGVhcm5lckNyZWF0aW9uRXJyb3IoZXJyb3JNZXNzYWdlKVxuICAgIH0gZmluYWxseSB7XG4gICAgICBzZXRJc0NyZWF0aW5nTGVhcm5lcihmYWxzZSlcbiAgICB9XG4gIH0sIFt1c2VyLCBpc0NyZWF0aW5nTGVhcm5lcl0pXG5cbiAgLy8gQ2hlY2sgZm9yIGV4aXN0aW5nIGF1dGggc3RhdGUgb24gbW91bnRcbiAgdXNlRWZmZWN0KCgpID0+IHtcbiAgICB0cnkge1xuICAgICAgLy8gQ2hlY2sgZm9yIHNhdmVkIGF1dGggc3RhdGUgaW4gY29va2llc1xuICAgICAgY29uc3QgYXV0aERhdGEgPSBnZXRBdXRoQ29va2llKClcbiAgICAgIGlmIChhdXRoRGF0YSAmJiBhdXRoRGF0YS5pc0xvZ2dlZEluICYmIGF1dGhEYXRhLnVzZXIpIHtcbiAgICAgICAgc2V0SXNMb2dnZWRJbih0cnVlKVxuICAgICAgICBzZXRVc2VyKGF1dGhEYXRhLnVzZXIpXG4gICAgICB9XG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUud2FybignRmFpbGVkIHRvIGxvYWQgYXV0aCBzdGF0ZSBmcm9tIGNvb2tpZXM6JywgZXJyb3IpXG4gICAgICAvLyBDbGVhciBwb3RlbnRpYWxseSBjb3JydXB0ZWQgYXV0aCBkYXRhXG4gICAgICBkZWxldGVBdXRoQ29va2llKClcbiAgICB9XG4gICAgXG4gICAgc2V0SXNJbml0aWFsaXplZCh0cnVlKVxuICB9LCBbXSlcblxuICByZXR1cm4gKFxuICAgIDxBdXRoQ29udGV4dC5Qcm92aWRlciB2YWx1ZT17eyBpc0xvZ2dlZEluLCB1c2VyLCBpc0luaXRpYWxpemVkLCBsb2dpbiwgbG9nb3V0IH19PlxuICAgICAge2NoaWxkcmVufVxuICAgIDwvQXV0aENvbnRleHQuUHJvdmlkZXI+XG4gIClcbn1cblxuZXhwb3J0IGZ1bmN0aW9uIHVzZUF1dGgoKSB7XG4gIGNvbnN0IGNvbnRleHQgPSB1c2VDb250ZXh0KEF1dGhDb250ZXh0KVxuICBpZiAoY29udGV4dCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgdGhyb3cgbmV3IEVycm9yKCd1c2VBdXRoIG11c3QgYmUgdXNlZCB3aXRoaW4gYW4gQXV0aFByb3ZpZGVyJylcbiAgfVxuICByZXR1cm4gY29udGV4dFxufVxuIl0sIm5hbWVzIjpbImNyZWF0ZUNvbnRleHQiLCJ1c2VDb250ZXh0IiwidXNlU3RhdGUiLCJ1c2VFZmZlY3QiLCJ1c2VDYWxsYmFjayIsInNldEF1dGhDb29raWUiLCJnZXRBdXRoQ29va2llIiwiZGVsZXRlQXV0aENvb2tpZSIsImdyYXBoeVBhY2thZ2VJbnRlZ3JhdGlvbiIsIkF1dGhDb250ZXh0IiwidW5kZWZpbmVkIiwiQXV0aFByb3ZpZGVyIiwiY2hpbGRyZW4iLCJpc0xvZ2dlZEluIiwic2V0SXNMb2dnZWRJbiIsInVzZXIiLCJzZXRVc2VyIiwiaXNJbml0aWFsaXplZCIsInNldElzSW5pdGlhbGl6ZWQiLCJpc0NyZWF0aW5nTGVhcm5lciIsInNldElzQ3JlYXRpbmdMZWFybmVyIiwibGVhcm5lckNyZWF0aW9uRXJyb3IiLCJzZXRMZWFybmVyQ3JlYXRpb25FcnJvciIsImxvZ2luIiwidXNlckRhdGEiLCJsb2dvdXQiLCJjcmVhdGVHcmFwaHlMZWFybmVyIiwicmVzdWx0IiwiY3JlYXRlTGVhcm5lckZyb21BdXRoIiwibmFtZSIsImVtYWlsIiwibW9iaWxlIiwic3VjY2VzcyIsImRhdGEiLCJ1cGRhdGVkVXNlciIsImdyYXBoeUxlYXJuZXJJZCIsImlkIiwiZXJyb3IiLCJlcnJvck1lc3NhZ2UiLCJFcnJvciIsIm1lc3NhZ2UiLCJhdXRoRGF0YSIsImNvbnNvbGUiLCJ3YXJuIiwiUHJvdmlkZXIiLCJ2YWx1ZSIsInVzZUF1dGgiLCJjb250ZXh0Il0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///98497\n"));

/***/ })

});